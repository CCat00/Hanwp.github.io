<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>灭God的技术博客</title>
  <subtitle>记录成长的脚步。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hanwp.github.io/"/>
  <updated>2017-04-05T05:13:57.000Z</updated>
  <id>http://hanwp.github.io/</id>
  
  <author>
    <name>灭God</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用Vutrl搭建ShadowSocks科学上网</title>
    <link href="http://hanwp.github.io/2017/04/05/Vutrl%E6%90%AD%E5%BB%BAShadowSocks%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <id>http://hanwp.github.io/2017/04/05/Vutrl搭建ShadowSocks科学上网/</id>
    <published>2017-04-05T03:30:12.000Z</published>
    <updated>2017-04-05T05:13:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前几天<a href="https://itunes.apple.com/cn/app/google-%E7%BF%BB%E8%AF%91-%E5%AE%9E%E7%8E%B0%E8%AF%AD%E9%9F%B3-%E6%8B%8D%E7%85%A7-%E6%89%8B%E5%86%99%E8%BE%93%E5%85%A5%E7%9A%84%E5%A4%9A%E5%9B%BD%E8%AF%AD%E8%A8%80%E5%8D%B3%E6%97%B6%E7%BF%BB%E8%AF%91%E5%BA%94%E7%94%A8-%E4%B8%8B%E8%BD%BD%E8%AF%AD%E8%A8%80%E5%8C%85%E7%A6%BB%E7%BA%BF%E7%8A%B6%E6%80%81%E4%B9%9F%E8%83%BD%E5%AE%9E%E6%97%B6%E7%BF%BB%E8%AF%91/id414706506?mt=8" target="_blank" rel="external">谷歌翻译APP</a>更新了5.8.0版本，并说明对中国优化，手机上终于可以不用挂<a href="http://baike.baidu.com/link?url=MdzHfCv0F9o_AKclt4hhz807qzN46K0imynVSJyG-v5M_x5nASXQ-rIrXJhByp7Tv5CYvkJe9c4ceC1dw-SCM5U8K3kMusjsTDxzCFWJQMQGBHWoyh3PMR9I5_v0FyE0X-8NPcqGXJFx9nqdHq5rh-G886uL8d15WvyojCscKlMilnsABFfMSV8XL3VVrahZ" target="_blank" rel="external">VPN</a>使用了。但是Google搜索服务目前还是不能使用，我之前是购买的云梯VPN服务，但是觉得不是很好使，有时链接不上，这又刚好到期了，于是就想着自己搭建一个VPS，科学上网。在这里记录一下。</p>
</blockquote>
<h1 id="VPS介绍"><a href="#VPS介绍" class="headerlink" title="VPS介绍"></a>VPS介绍</h1><ul>
<li><strong>简介</strong>：VPS 是 Virtual private server（虚拟专用服务器）的缩写，指通过虚拟化技术在独立服务器中运行的专用服务器。每个使用VPS技术的虚拟独立服务器拥有各自独立的公网IP地址、操作系统、硬盘空间、内存空间、CPU资源等，还可以进行安装程序、重启服务器等操作，与运行一台独立服务器完全相同。说简单点，就是可以将一部真实的服务器中分割成多个不同的虚拟服务器，只是它们暴露给用户的感觉就像是一个独立的机器而已。</li>
<li><strong>要求</strong>：本地要想科学上网，需要你的VPS能够翻墙，所以可以选择购买香港或者海外的服务器，国外的比如：<a href="https://cloud.digitalocean.com/" target="_blank" rel="external">DigitalOcean</a>、<a href="https://www.vultr.com" target="_blank" rel="external">Vutrl</a>、BandwagonHost(搬瓦工)等等。</li>
<li><p><strong>选择</strong>：</p>
<ul>
<li><a href="https://cloud.digitalocean.com/" target="_blank" rel="external">DigitalOcean</a>的我之前买过一次，选的是新加坡的服务器，ping也不高，但是不稳定，有时候ping不到（可能和我的联通宽带有关系）。</li>
<li>于是这次买了<a href="https://www.vultr.com" target="_blank" rel="external">Vutrl</a>的日本VPS，ping100左右，挺稳定的。本文介绍的就是基于这个的。</li>
<li>BandwagonHost(搬瓦工)的没有买过不做评价。</li>
</ul>
<blockquote>
<p>顺便说下：使用我的<a href="http://www.vultr.com/?ref=7140632" target="_blank" rel="external">优惠链接</a>注册并充值$10,可以奖励给我10$，所以如果觉得可以，并且决定要使用的话，可以顺便帮我一下:)</p>
</blockquote>
<a id="more"></a>
</li>
</ul>
<h1 id="创建自己的VPS"><a href="#创建自己的VPS" class="headerlink" title="创建自己的VPS"></a>创建自己的VPS</h1><ul>
<li>选择服务器的位置 <img src="/images/vultr_shadowsocks/服务器地址选择.png" alt="服务器地址选择"></li>
<li>选择服务器的系统，这里选择CentOS或者Ubuntu的都可以，我选择的是Ubuntu14.04 x64 的系统。 <img src="/images/vultr_shadowsocks/服务器系统选择.png" alt="服务器系统选择"></li>
<li>选择服务器的套餐 <img src="/images/vultr_shadowsocks/服务器套餐选择.png" alt="服务器套餐选择"></li>
</ul>
<blockquote>
<p>个人更推荐第一个套餐(2.5$一个月)，个人使用就足够了，我选的就是这个，但是在我写教程的时候，这个套餐暂时售空了！那好吧，那就买5$一个月的吧(可以和小伙伴合伙购买)。</p>
</blockquote>
<ul>
<li>输入标签然后提交 <img src="/images/vultr_shadowsocks/服务器确定提交.png" alt="服务器确定提交"></li>
<li>好了，在服务器列表就可以看到自己的服务器了！ <img src="/images/vultr_shadowsocks/服务器列表.png" alt="服务器列表"></li>
</ul>
<h1 id="搭建服务端ShadowSocks"><a href="#搭建服务端ShadowSocks" class="headerlink" title="搭建服务端ShadowSocks"></a>搭建服务端ShadowSocks</h1><ul>
<li>首先Mac可以用终端SSH连接到你的服务器(ssh root@yourip)，win可以用软件，具体网上找下。</li>
<li>然后执行下列命令：</li>
</ul>
<p>Ubuntu:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python-pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure>
<p>CentOS</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install python-setuptools &amp;&amp; easy_install pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure>
<ul>
<li>创建配置文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/shadowsock.json</span><br></pre></td></tr></table></figure>
<p>打开之后按 i 编辑，编辑完成之后，按 esc ，然后输入 :wq ,保存退出。</p>
<p>e.g.:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;my_server_ip&quot;,</span><br><span class="line">    &quot;server_port&quot;:8000,</span><br><span class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;password&quot;:&quot;mypassword&quot;,</span><br><span class="line">    &quot;timeout&quot;:300,</span><br><span class="line">    &quot;method&quot;:&quot;rc4-md5&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>然后运行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br></pre></td></tr></table></figure>
<blockquote>
<p>停止运行： <code>ssserver -c /etc/shadowsocks.json -d stop</code></p>
</blockquote>
<h1 id="客户端安装"><a href="#客户端安装" class="headerlink" title="客户端安装"></a>客户端安装</h1><p>客户端安装比较简单，这里直接推荐<a href="https://github.com/shadowsocks/ShadowsocksX-NG" target="_blank" rel="external">ShadowsocksX-NG</a>，然后配置： <img src="/images/vultr_shadowsocks/客户端配置.png" alt="客户端配置"></p>
<p>iphone的话推荐：Wingy</p>
<h1 id="锐速加速"><a href="#锐速加速" class="headerlink" title="锐速加速"></a>锐速加速</h1><p>锐速（serverspeeder），是一款TCP加速程序，能够增强VPS/服务器连接的稳定性，且有效的提高服务器的带宽利用率，进而提高访问速度。具体教程参考这里：<a href="https://blessing.studio/ubuntu-14-04-change-kernel-to-install-serverspeeder/" target="_blank" rel="external">Ubuntu 14.04 更换内核以安装锐速</a></p>
<h1 id="搭建VPN"><a href="#搭建VPN" class="headerlink" title="搭建VPN"></a>搭建VPN</h1><p>上面只是搭建了SS代理，如果你需要终端也能翻墙，就需要搭建VPN了。可以参考这篇文章：<a href="https://quericy.me/blog/699/" target="_blank" rel="external">CentOS/Ubuntu一键安装IPSEC/IKEV2 VPN服务器</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前几天&lt;a href=&quot;https://itunes.apple.com/cn/app/google-%E7%BF%BB%E8%AF%91-%E5%AE%9E%E7%8E%B0%E8%AF%AD%E9%9F%B3-%E6%8B%8D%E7%85%A7-%E6%89%8B%E5%86%99%E8%BE%93%E5%85%A5%E7%9A%84%E5%A4%9A%E5%9B%BD%E8%AF%AD%E8%A8%80%E5%8D%B3%E6%97%B6%E7%BF%BB%E8%AF%91%E5%BA%94%E7%94%A8-%E4%B8%8B%E8%BD%BD%E8%AF%AD%E8%A8%80%E5%8C%85%E7%A6%BB%E7%BA%BF%E7%8A%B6%E6%80%81%E4%B9%9F%E8%83%BD%E5%AE%9E%E6%97%B6%E7%BF%BB%E8%AF%91/id414706506?mt=8&quot;&gt;谷歌翻译APP&lt;/a&gt;更新了5.8.0版本，并说明对中国优化，手机上终于可以不用挂&lt;a href=&quot;http://baike.baidu.com/link?url=MdzHfCv0F9o_AKclt4hhz807qzN46K0imynVSJyG-v5M_x5nASXQ-rIrXJhByp7Tv5CYvkJe9c4ceC1dw-SCM5U8K3kMusjsTDxzCFWJQMQGBHWoyh3PMR9I5_v0FyE0X-8NPcqGXJFx9nqdHq5rh-G886uL8d15WvyojCscKlMilnsABFfMSV8XL3VVrahZ&quot;&gt;VPN&lt;/a&gt;使用了。但是Google搜索服务目前还是不能使用，我之前是购买的云梯VPN服务，但是觉得不是很好使，有时链接不上，这又刚好到期了，于是就想着自己搭建一个VPS，科学上网。在这里记录一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;VPS介绍&quot;&gt;&lt;a href=&quot;#VPS介绍&quot; class=&quot;headerlink&quot; title=&quot;VPS介绍&quot;&gt;&lt;/a&gt;VPS介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;简介&lt;/strong&gt;：VPS 是 Virtual private server（虚拟专用服务器）的缩写，指通过虚拟化技术在独立服务器中运行的专用服务器。每个使用VPS技术的虚拟独立服务器拥有各自独立的公网IP地址、操作系统、硬盘空间、内存空间、CPU资源等，还可以进行安装程序、重启服务器等操作，与运行一台独立服务器完全相同。说简单点，就是可以将一部真实的服务器中分割成多个不同的虚拟服务器，只是它们暴露给用户的感觉就像是一个独立的机器而已。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;要求&lt;/strong&gt;：本地要想科学上网，需要你的VPS能够翻墙，所以可以选择购买香港或者海外的服务器，国外的比如：&lt;a href=&quot;https://cloud.digitalocean.com/&quot;&gt;DigitalOcean&lt;/a&gt;、&lt;a href=&quot;https://www.vultr.com&quot;&gt;Vutrl&lt;/a&gt;、BandwagonHost(搬瓦工)等等。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;选择&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.digitalocean.com/&quot;&gt;DigitalOcean&lt;/a&gt;的我之前买过一次，选的是新加坡的服务器，ping也不高，但是不稳定，有时候ping不到（可能和我的联通宽带有关系）。&lt;/li&gt;
&lt;li&gt;于是这次买了&lt;a href=&quot;https://www.vultr.com&quot;&gt;Vutrl&lt;/a&gt;的日本VPS，ping100左右，挺稳定的。本文介绍的就是基于这个的。&lt;/li&gt;
&lt;li&gt;BandwagonHost(搬瓦工)的没有买过不做评价。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;顺便说下：使用我的&lt;a href=&quot;http://www.vultr.com/?ref=7140632&quot;&gt;优惠链接&lt;/a&gt;注册并充值$10,可以奖励给我10$，所以如果觉得可以，并且决定要使用的话，可以顺便帮我一下:)&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="教程" scheme="http://hanwp.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="科学上网" scheme="http://hanwp.github.io/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
      <category term="VPS" scheme="http://hanwp.github.io/tags/VPS/"/>
    
      <category term="ShadowSocks" scheme="http://hanwp.github.io/tags/ShadowSocks/"/>
    
  </entry>
  
  <entry>
    <title>UITableViewCell侧滑</title>
    <link href="http://hanwp.github.io/2017/02/04/UITableViewCell%E4%BE%A7%E6%BB%91/"/>
    <id>http://hanwp.github.io/2017/02/04/UITableViewCell侧滑/</id>
    <published>2017-02-04T02:01:08.000Z</published>
    <updated>2017-02-04T02:48:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>UITableViewCell的侧滑可以很方便的进行一些操作，比如删除、标记等等，有一个很好用的第三方库<a href="https://github.com/CEWendel/SWTableViewCell" target="_blank" rel="external">SWTableViewCell</a>，可以帮助我们快速实现Cell的左滑和右滑，这个库有详细的使用说明，这里就不多说了。但是有些时候，我们不想只为了某一个界面就导入这么一个库，我们也可以使用系统自带实现一些简单的侧滑。</p>
<p><img src="https://camo.githubusercontent.com/c138fcd3df24ae1d91f8bf6feb51a1cf111606a4/687474703a2f2f692e696d6775722e636f6d2f6e6a4b436a4b382e676966" alt="效果图"></p>
<a id="more"></a>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="iOS8之前"><a href="#iOS8之前" class="headerlink" title="iOS8之前"></a>iOS8之前</h2><p>在iOS8以前我们可以通过实现UITableView下面的代理方法就可以实现一个简单的侧滑，但是这种只能有一个按钮，比较局限。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)tableView:(<span class="built_in">UITableView</span> *)tableView canEditRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView commitEditingStyle:(<span class="built_in">UITableViewCellEditingStyle</span>)editingStyle forRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)tableView:(<span class="built_in">UITableView</span> *)tableView canMoveRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView titleForDeleteConfirmationButtonForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">@"删除"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="iOS8开始系统提供了UITableViewRowAction"><a href="#iOS8开始系统提供了UITableViewRowAction" class="headerlink" title="iOS8开始系统提供了UITableViewRowAction"></a>iOS8开始系统提供了UITableViewRowAction</h2><p>只需要实现下面这个代理方法就可以了，返回的是UITableViewRowAction数组，可以实现多个按钮。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (nullable <span class="built_in">NSArray</span>&lt;<span class="built_in">UITableViewRowAction</span> *&gt; *)tableView:(<span class="built_in">UITableView</span> *)tableView editActionsForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">UITableViewRowAction</span> *cancle = [<span class="built_in">UITableViewRowAction</span> rowActionWithStyle:<span class="built_in">UITableViewRowActionStyleDefault</span> title:<span class="string">@"取消拉黑"</span> handler:^(<span class="built_in">UITableViewRowAction</span> * _Nonnull action, <span class="built_in">NSIndexPath</span> * _Nonnull indexPath) &#123;</span><br><span class="line">        </span><br><span class="line">		<span class="comment">// do something ...</span></span><br><span class="line">    &#125;];</span><br><span class="line">    cancle.backgroundColor = RGBCOLORV(<span class="number">0xdedede</span>);</span><br><span class="line">    <span class="keyword">return</span> @[cancle];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意这里有一个坑！在iOS8上面，只实现这个方法并不能侧滑，还需要加上下面这个方法，什么都不用实现就可以，这估  这是系统的bug。</p>
</blockquote>
  <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// fixbug: 在iOS8.3真机上面，不重写这个方法，就无法左滑 </span></span><br><span class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView commitEditingStyle:(<span class="built_in">UITableViewCellEditingStyle</span>)editingStyle forRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果我们想要修改UITableViewRowAction的字体颜色，可以重写cell的<code>layoutsubviews</code>方法</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">UIView</span> *sbv <span class="keyword">in</span> <span class="keyword">self</span>.subviews) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">UIView</span> *sbv2 <span class="keyword">in</span> sbv.subviews) &#123;</span><br><span class="line">            <span class="built_in">NSString</span> *class_str = <span class="built_in">NSStringFromClass</span>([sbv2 class]);</span><br><span class="line">            <span class="comment">//NSLog(@"class_str = %@", class_str);</span></span><br><span class="line">            <span class="keyword">if</span> ([class_str rangeOfString:<span class="string">@"UITableViewCellActionButton"</span>].location != <span class="built_in">NSNotFound</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">UIView</span> *v <span class="keyword">in</span> sbv2.subviews) &#123;</span><br><span class="line">                    <span class="built_in">NSString</span> *class_str2 = <span class="built_in">NSStringFromClass</span>([v class]);</span><br><span class="line">                    <span class="comment">//NSLog(@"class_str2 = %@", class_str2);</span></span><br><span class="line">                    <span class="keyword">if</span> ([class_str2 rangeOfString:<span class="string">@"UIButtonLabel"</span>].location != <span class="built_in">NSNotFound</span>) &#123;</span><br><span class="line">                        <span class="built_in">UILabel</span> *l = (<span class="built_in">UILabel</span> *)v;</span><br><span class="line">                        <span class="comment">//NSLog(@"label = %@", l);</span></span><br><span class="line">                        l.textColor = ; <span class="comment">//你想要更改的颜色</span></span><br><span class="line">                        l.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">16</span>]; <span class="comment">//你想要的字体</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;UITableViewCell的侧滑可以很方便的进行一些操作，比如删除、标记等等，有一个很好用的第三方库&lt;a href=&quot;https://github.com/CEWendel/SWTableViewCell&quot;&gt;SWTableViewCell&lt;/a&gt;，可以帮助我们快速实现Cell的左滑和右滑，这个库有详细的使用说明，这里就不多说了。但是有些时候，我们不想只为了某一个界面就导入这么一个库，我们也可以使用系统自带实现一些简单的侧滑。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/c138fcd3df24ae1d91f8bf6feb51a1cf111606a4/687474703a2f2f692e696d6775722e636f6d2f6e6a4b436a4b382e676966&quot; alt=&quot;效果图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="实用技巧" scheme="http://hanwp.github.io/categories/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="iOS" scheme="http://hanwp.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>高仿今日头条分享界面的弹出动画</title>
    <link href="http://hanwp.github.io/2016/11/25/%E9%AB%98%E4%BB%BF%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1%E5%88%86%E4%BA%AB%E7%95%8C%E9%9D%A2%E7%9A%84%E5%BC%B9%E5%87%BA%E5%8A%A8%E7%94%BB/"/>
    <id>http://hanwp.github.io/2016/11/25/高仿今日头条分享界面的弹出动画/</id>
    <published>2016-11-25T02:30:33.000Z</published>
    <updated>2016-11-25T07:36:01.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>声明：本文是博主原创，转载请声明出处：<a href="http://hanwp.github.io/2016/11/25/高仿今日头条分享界面的弹出动画/">http://hanwp.github.io/2016/11/25/高仿今日头条分享界面的弹出动画/</a></p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/852660-abf84571340ac24a.gif?imageMogr2/auto-orient/strip" alt="DemoGif.gif"></p>
<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>今日头条可以说是我们手机中一款不可缺少的APP，在我看到喜欢的文章想分享给朋友时，就被弹出的分享界面动画所吸引了，于是我就尝试模仿一下，方便学习交流，写的不好的，请指正。<a href="https://github.com/Hanwp/TodayNewsShareDemo" target="_blank" rel="external">全部代码见Github，喜欢的还请给个star😁</a></p>
<a id="more"></a>
<h1 id="整体分析"><a href="#整体分析" class="headerlink" title="整体分析"></a>整体分析</h1><p>分享界面由一个背景视图，和一个主要视图组成，主要视图两行都可以滑动，于是我用了两个<code>UIScrollView</code>实现。<br><img src="http://upload-images.jianshu.io/upload_images/852660-a19b9cf9902c3fc0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="主界面@2x.png"></p>
<h1 id="自定义按钮"><a href="#自定义按钮" class="headerlink" title="自定义按钮"></a>自定义按钮</h1><p>可以看出分享上面的点击按钮是图片在上方，文字在下方，于是我就子类化<code>UIButton</code>重新布局：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutSubviews</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.layoutSubviews()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> imageView?.image != <span class="literal">nil</span> &#123;</span><br><span class="line">            imageView!.frame = <span class="type">CGRect</span>.<span class="keyword">init</span>(</span><br><span class="line">                x: (<span class="keyword">self</span>.bounds.size.width - <span class="keyword">self</span>.imageView!.image!.size.width) / <span class="number">2.0</span>,</span><br><span class="line">                y: <span class="number">0</span>,</span><br><span class="line">                width: imageView!.image!.size.width,</span><br><span class="line">                height: imageView!.image!.size.height)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> titleLabel != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> titleLabelSize = getTitleLabelSize()</span><br><span class="line">            titleLabel!.frame = <span class="type">CGRect</span>.<span class="keyword">init</span>(</span><br><span class="line">                x: (<span class="keyword">self</span>.bounds.size.width - titleLabelSize.width) / <span class="number">2.0</span>,</span><br><span class="line">                y: imageView!.frame.maxY + <span class="number">7.0</span>,</span><br><span class="line">                width: titleLabelSize.width,</span><br><span class="line">                height: titleLabelSize.height)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="完成整体UI"><a href="#完成整体UI" class="headerlink" title="完成整体UI"></a>完成整体UI</h1><p>将<code>btn</code>加到<code>scrollview</code>上面。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> topScrollView: <span class="type">UIScrollView</span>!</span><br><span class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> bottomScrollView: <span class="type">UIScrollView</span>!</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> imgArrary = [<span class="string">"alishq_allshare_60x60_"</span>, <span class="string">"weixin_allshare_60x60_"</span>, <span class="string">"qq_allshare_60x60_"</span>, <span class="string">"qqkj_allshare_60x60_"</span>, <span class="string">"sina_allshare_60x60_"</span>, <span class="string">"qqwb_allshare_60x60_"</span>, <span class="string">"aliplay_allshare_60x60_"</span>, <span class="string">"alishq_allshare_60x60_"</span>]</span><br><span class="line">        <span class="keyword">let</span> titleArray = [<span class="string">"微信朋友圈"</span>, <span class="string">"微信好友"</span>, <span class="string">"手机QQ"</span>, <span class="string">"QQ空间"</span>, <span class="string">"新浪微博"</span>, <span class="string">"腾讯微博"</span>, <span class="string">"支付宝好友"</span>, <span class="string">"支付宝生活圈"</span>]</span><br><span class="line">        setScrollViewContent(withScrollView: topScrollView, imgArray: imgArrary, titleArray: titleArray)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> imgArrary2 = [<span class="string">"airdrop_allshare_60x60_"</span>, <span class="string">"link_allshare_60x60_"</span>, <span class="string">"mail_allshare_60x60_"</span>, <span class="string">"copy_allshare_60x60_"</span>]</span><br><span class="line">        <span class="keyword">let</span> titleArray2 = [<span class="string">"系统分享"</span>, <span class="string">"信息"</span>, <span class="string">"邮件"</span>, <span class="string">"复制链接"</span>]</span><br><span class="line">        setScrollViewContent(withScrollView: bottomScrollView, imgArray: imgArrary2, titleArray: titleArray2)</span><br><span class="line"></span><br><span class="line">fileprivate <span class="function"><span class="keyword">func</span> <span class="title">setScrollViewContent</span><span class="params">(withScrollView scrollView: UIScrollView, imgArray: [String], titleArray: [String])</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> btnW: <span class="type">CGFloat</span> = <span class="number">76</span></span><br><span class="line">        <span class="keyword">let</span> btnH: <span class="type">CGFloat</span> = <span class="number">90</span></span><br><span class="line">        <span class="keyword">let</span> btnY: <span class="type">CGFloat</span> = scrollView == topScrollView ? <span class="number">23</span> : <span class="number">15</span></span><br><span class="line">        <span class="keyword">let</span> margin: <span class="type">CGFloat</span> = <span class="number">18</span></span><br><span class="line">        <span class="keyword">var</span> btnX: <span class="type">CGFloat</span> = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (index, value) <span class="keyword">in</span> imgArray.enumerated() &#123;</span><br><span class="line">            </span><br><span class="line">            btnX = btnW * <span class="type">CGFloat</span>(index) + margin</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">let</span> btn = <span class="type">HWShareButton</span>(type: .custom)</span><br><span class="line">            btn.frame = <span class="type">CGRect</span>.<span class="keyword">init</span>(x: btnX, y: btnY, width: btnW, height: btnH)</span><br><span class="line">            btn.setImage(<span class="type">UIImage</span>.<span class="keyword">init</span>(named: value), <span class="keyword">for</span>: .normal)</span><br><span class="line">            btn.setTitle(titleArray[index], <span class="keyword">for</span>: .normal)</span><br><span class="line">            scrollView.addSubview(btn)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> index == imgArray.<span class="built_in">count</span> - <span class="number">1</span> &#123;</span><br><span class="line">                scrollView.contentSize = <span class="type">CGSize</span>.<span class="keyword">init</span>(width: btn.frame.maxX + margin, height: btnH)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/852660-ccdec7a4cec13dd1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图.png"></p>
<h1 id="加上动画"><a href="#加上动画" class="headerlink" title="加上动画"></a>加上动画</h1><p>给每个按钮都依次加上动画：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">HWShareButton</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">shakeBtn</span><span class="params">(delay: TimeInterval)</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> top1 = <span class="type">CGAffineTransform</span>.<span class="keyword">init</span>(translationX: <span class="number">0</span>, y: <span class="number">150</span>)</span><br><span class="line">        <span class="keyword">let</span> reset = <span class="type">CGAffineTransform</span>.identity</span><br><span class="line">        <span class="comment">//0 初始状态 下</span></span><br><span class="line">        <span class="keyword">self</span>.transform = top1</span><br><span class="line">        <span class="keyword">self</span>.alpha = <span class="number">0.3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/// 系统自带的弹簧效果</span></span><br><span class="line">        <span class="comment">/// usingSpringWithDamping 0~1 数值越小「弹簧」的振动效果越明显</span></span><br><span class="line">        <span class="comment">/// initialSpringVelocity 初始的速度，数值越大一开始移动越快</span></span><br><span class="line">        <span class="type">UIView</span>.animate(withDuration: <span class="number">0.8</span>, delay: delay, usingSpringWithDamping: <span class="number">0.7</span>, initialSpringVelocity: <span class="number">10</span>, options:.curveEaseOut , animations: &#123;</span><br><span class="line">            <span class="keyword">self</span>.transform = reset</span><br><span class="line">            <span class="keyword">self</span>.alpha = <span class="number">1</span></span><br><span class="line">        &#125;, completion: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里我之前用的是动画嵌套的方法😁，后来发现了系统原来自带的有弹簧效果。把我之前的写法也贴上来吧。详见<a href="https://github.com/Hanwp/TodayNewsShareDemo" target="_blank" rel="external">源代码</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">UIView.animate(withDuration: 0.2, delay: delay, options: .curveEaseOut, animations: &#123;</span><br><span class="line">            </span><br><span class="line">            self.transform = top2</span><br><span class="line">            self.alpha = 1</span><br><span class="line">            </span><br><span class="line">        &#125;, completion: &#123; _ in</span><br><span class="line">            </span><br><span class="line">            //2 下</span><br><span class="line">            </span><br><span class="line">            UIView.animate(withDuration: 0.2, delay: 0, options: .curveEaseIn, animations: &#123;</span><br><span class="line">                </span><br><span class="line">                self.transform = bottom1</span><br><span class="line">                </span><br><span class="line">            &#125;, completion: &#123; (_) in</span><br><span class="line">                </span><br><span class="line">                //3 还原</span><br><span class="line">                UIView.animate(withDuration: 0.15, delay: 0, options: .curveEaseIn, animations: &#123;</span><br><span class="line">                    </span><br><span class="line">                    self.transform = reset</span><br><span class="line">                    </span><br><span class="line">                &#125;, completion: &#123; (_) in</span><br><span class="line">                    </span><br><span class="line">                &#125;)  </span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实这个东西也并不复杂，主要细心观察并思考就能实现。最后希望大家喜欢，谢谢！</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;声明：本文是博主原创，转载请声明出处：&lt;a href=&quot;http://hanwp.github.io/2016/11/25/高仿今日头条分享界面的弹出动画/&quot;&gt;http://hanwp.github.io/2016/11/25/高仿今日头条分享界面的弹出动画/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/852660-abf84571340ac24a.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;DemoGif.gif&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;今日头条可以说是我们手机中一款不可缺少的APP，在我看到喜欢的文章想分享给朋友时，就被弹出的分享界面动画所吸引了，于是我就尝试模仿一下，方便学习交流，写的不好的，请指正。&lt;a href=&quot;https://github.com/Hanwp/TodayNewsShareDemo&quot;&gt;全部代码见Github，喜欢的还请给个star😁&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://hanwp.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="iOS" scheme="http://hanwp.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="http://hanwp.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>妙汇</title>
    <link href="http://hanwp.github.io/2016/11/10/%E5%A6%99%E6%B1%87/"/>
    <id>http://hanwp.github.io/2016/11/10/妙汇/</id>
    <published>2016-11-10T07:22:53.000Z</published>
    <updated>2016-11-14T07:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前一段时间一直在零碎的学习swift的知识点，由于公司项目没有用swift开发，所以就想着找个项目模仿一下，练习一下swift。</p>
</blockquote>
<a id="more"></a>
<h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="http://upload-images.jianshu.io/upload_images/852660-470944e57ae9631b.gif?imageMogr2/auto-orient/strip" alt="首页gif.gif"><br><img src="http://upload-images.jianshu.io/upload_images/852660-095a9a25c6da23b7.gif?imageMogr2/auto-orient/strip" alt="分类gif.gif"><br><img src="http://upload-images.jianshu.io/upload_images/852660-021879534e260af4.gif?imageMogr2/auto-orient/strip" alt="视野gif.gif"></p>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>这里我就不写怎么从零模仿APP了，抓包呀这些，网上好多。<br>我没有和官方的做的一模一样，只是大概实现了几个页面，能到到练手swift的目的就好😁。具体逻辑就看代码吧：<a href="https://github.com/Hanwp/miaohui--swift" target="_blank" rel="external">代码地址</a>。</p>
<blockquote>
<p>有什么问题欢迎给我留言~</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前一段时间一直在零碎的学习swift的知识点，由于公司项目没有用swift开发，所以就想着找个项目模仿一下，练习一下swift。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="练习" scheme="http://hanwp.github.io/categories/%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="iOS" scheme="http://hanwp.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="http://hanwp.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>iOS10新特性-UserNotifications（二）</title>
    <link href="http://hanwp.github.io/2016/10/09/iOS10%E6%96%B0%E7%89%B9%E6%80%A7-UserNotifications%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://hanwp.github.io/2016/10/09/iOS10新特性-UserNotifications（二）/</id>
    <published>2016-10-09T08:30:01.000Z</published>
    <updated>2016-11-14T08:55:56.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="http://hanwp.github.io/2016/10/08/iOS10%E6%96%B0%E7%89%B9%E6%80%A7-UserNotifications/">上篇文章</a>主要介绍了新的通知框架的基本使用，这篇文章主要说一下<strong>多媒体通知</strong>和<strong>扩展</strong>。</p>
</blockquote>
<a id="more"></a>
<h1 id="扩展（Notification-Extension）"><a href="#扩展（Notification-Extension）" class="headerlink" title="扩展（Notification Extension）"></a>扩展（Notification Extension）</h1><h2 id="1-Notification-Service-Extension"><a href="#1-Notification-Service-Extension" class="headerlink" title="1.Notification Service Extension"></a>1.Notification Service Extension</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>收到远程推送通知之后，我们可以利用<strong>Notification Service Extension</strong>这个扩展进行通知的修改。</p>
<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p><img src="http://upload-images.jianshu.io/upload_images/852660-ae96bdc6dcdb4c09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="un_service_extension.png"></p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>建好target之后可以看到，系统就为我们实现了基本的方法。我这里在收到通知之后修改了<code>body</code>。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UserNotifications</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotificationService</span>: <span class="title">UNNotificationServiceExtension</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> contentHandler: ((<span class="type">UNNotificationContent</span>) -&gt; <span class="type">Void</span>)?</span><br><span class="line">    <span class="keyword">var</span> bestAttemptContent: <span class="type">UNMutableNotificationContent</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceive</span><span class="params">(<span class="number">_</span> request: UNNotificationRequest, withContentHandler contentHandler: @escaping <span class="params">(UNNotificationContent)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.contentHandler = contentHandler</span><br><span class="line">        bestAttemptContent = (request.content.mutableCopy() <span class="keyword">as</span>? <span class="type">UNMutableNotificationContent</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> bestAttemptContent = bestAttemptContent &#123;</span><br><span class="line">            <span class="comment">// Modify the notification content here...</span></span><br><span class="line">            <span class="keyword">if</span> bestAttemptContent.categoryIdentifier == <span class="string">"ceshi"</span> &#123;</span><br><span class="line">                bestAttemptContent.body = <span class="string">"\(bestAttemptContent.body) 加上修改内容了！"</span></span><br><span class="line">            &#125;</span><br><span class="line">            contentHandler(bestAttemptContent)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">serviceExtensionTimeWillExpire</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// Called just before the extension will be terminated by the system.</span></span><br><span class="line">        <span class="comment">// Use this as an opportunity to deliver your "best attempt" at modified content, otherwise the original push payload will be used.</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> contentHandler = contentHandler, <span class="keyword">let</span> bestAttemptContent =  bestAttemptContent &#123;</span><br><span class="line">            contentHandler(bestAttemptContent)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h3><p><img src="http://upload-images.jianshu.io/upload_images/852660-780cad11c6f89ba2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="un.extension.modify.png"></p>
<blockquote>
<p>注：<strong>Notification Service Extension</strong> 现在只对远程推送的通知有效。因此<a href="https://github.com/Hanwp/UNNotification.git" target="_blank" rel="external">Demo</a>中我集成了<a href="https://www.jiguang.cn" target="_blank" rel="external">极光推送</a>，为了方便测试使用。</p>
</blockquote>
<p><a href="https://onevcat.com/2016/08/notification/" target="_blank" rel="external">喵神</a>认为这个特性可以方便传输安全性的信息。下面是他的blog原话：</p>
<blockquote>
<p>使用在本机截取推送并替换内容的方式，可以完成端到端 (end-to-end) 的推送加密。你在服务器推送 payload 中加入加密过的文本，在客户端接到通知后使用预先定义或者获取过的密钥进行解密，然后立即显示。这样一来，即使推送信道被第三方截取，其中所传递的内容也还是安全的。使用这种方式来发送密码或者敏感信息，对于一些金融业务应用和聊天应用来说，应该是必备的特性。</p>
</blockquote>
<h2 id="2-Notification-Content-Extension"><a href="#2-Notification-Content-Extension" class="headerlink" title="2.Notification Content Extension"></a>2.Notification Content Extension</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>我们可以利用<strong>Notification Content Extension</strong>这个扩展进行通知视图的自定义。</p>
<h3 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h3><p><img src="http://upload-images.jianshu.io/upload_images/852660-26dbdf451b043254.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="un.content.create.png"></p>
<p><code>NotificationViewController</code>继承于普通的<code>UIViewController</code>，我们可以自己定义各种UI。这里就是创建好之后，默认自带的一个label。</p>
<blockquote>
<p>注意：需要在info.plist文件里设置对应的<code>UNNotificationExtensionCategory</code>要不然，这个自定义的UI是不起作用的。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/852660-1252f5fb605bd243.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="un.content.info.plist.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/852660-714c30c8b0dc647c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="un.content.plist.categoryIden.png"></p>
<h3 id="修改标题"><a href="#修改标题" class="headerlink" title="修改标题"></a>修改标题</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"NotificationViewController.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;UserNotifications/UserNotifications.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;UserNotificationsUI/UserNotificationsUI.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NotificationViewController</span> () &lt;<span class="title">UNNotificationContentExtension</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> <span class="keyword">IBOutlet</span> <span class="built_in">UILabel</span> *label;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NotificationViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any required interface initialization here.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)didReceiveNotification:(UNNotification *)notification &#123;</span><br><span class="line">    <span class="keyword">self</span>.label.text = <span class="string">@"这是自定义的label"</span>;<span class="comment">//notification.request.content.body;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="http://upload-images.jianshu.io/upload_images/852660-a5081d84154a7819.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="un.content.customUI.png"></p>
<h1 id="多媒体通知-通知中携带图片、音频、视频"><a href="#多媒体通知-通知中携带图片、音频、视频" class="headerlink" title="多媒体通知(通知中携带图片、音频、视频)"></a>多媒体通知(通知中携带图片、音频、视频)</h1><h2 id="具体文件类型和大小限制如下："><a href="#具体文件类型和大小限制如下：" class="headerlink" title="具体文件类型和大小限制如下："></a>具体文件类型和大小限制如下：</h2><p><img src="http://upload-images.jianshu.io/upload_images/852660-46302cb765262cc0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="un.attachment.supportFileType.png"></p>
<h2 id="1-为本地通知增加多媒体内容"><a href="#1-为本地通知增加多媒体内容" class="headerlink" title="1.为本地通知增加多媒体内容"></a>1.为本地通知增加多媒体内容</h2><h3 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多媒体通知(发送一个图片)</span></span><br><span class="line"><span class="built_in">NSString</span> *imagePath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"attachment_pic"</span> ofType:<span class="string">@"jpg"</span>];</span><br><span class="line"><span class="built_in">NSURL</span> *imageURL = [<span class="built_in">NSURL</span> fileURLWithPath:imagePath];</span><br><span class="line">UNNotificationAttachment *attachment = [UNNotificationAttachment attachmentWithIdentifier:<span class="string">@"attachment.identifier"</span> URL:imageURL options:<span class="literal">nil</span> error:<span class="literal">nil</span>];</span><br><span class="line">content.attachments = @[attachment,attachment];</span><br></pre></td></tr></table></figure>
<h3 id="添加图片的效果："><a href="#添加图片的效果：" class="headerlink" title="添加图片的效果："></a>添加图片的效果：</h3><p><img src="http://upload-images.jianshu.io/upload_images/852660-cfbe640c1f767f98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="attachment_pic.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/852660-ed221866e7dbe42c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="attachment_pic_big.png"></p>
<h3 id="添加音频"><a href="#添加音频" class="headerlink" title="添加音频"></a>添加音频</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多媒体通知(发送一个mp3)</span></span><br><span class="line">    <span class="built_in">NSString</span> *mp3Path = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"Fly"</span> ofType:<span class="string">@"mp3"</span>];</span><br><span class="line">    <span class="built_in">NSURL</span> *mp3URL = [<span class="built_in">NSURL</span> fileURLWithPath:mp3Path];</span><br><span class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</span><br><span class="line">    UNNotificationAttachment *mp3Attachment = [UNNotificationAttachment attachmentWithIdentifier:<span class="string">@"mp3.attachment.identifier"</span> URL:mp3URL options:<span class="literal">nil</span> error:&amp;error];</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"error = %@"</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">    content.attachments = @[mp3Attachment];</span><br></pre></td></tr></table></figure>
<h3 id="添加音频的效果："><a href="#添加音频的效果：" class="headerlink" title="添加音频的效果："></a>添加音频的效果：</h3><p><img src="http://upload-images.jianshu.io/upload_images/852660-413b9cefc3c64ccc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="un.test.mp3.png"></p>
<blockquote>
<p>如果同时添加了图片和mp3也就是添加多个附件的时候，只会展示第一个。</p>
</blockquote>
<h3 id="添加视频"><a href="#添加视频" class="headerlink" title="添加视频"></a>添加视频</h3><p>因为没有合适的视频，视频我估计也就差不多，我这边就不测试了。</p>
<h2 id="2-为远程通知增加多媒体内容"><a href="#2-为远程通知增加多媒体内容" class="headerlink" title="2.为远程通知增加多媒体内容"></a>2.为远程通知增加多媒体内容</h2><p>远程通知携带多媒体内容需要借助上面提到的<strong>Notification Service Extension</strong>，在拦截到通知的时候，可以是一个远程的url，也可以是bundle中的一个url，在处理完之后，更改通知的<code>attachment</code>就可以了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://hanwp.github.io/2016/10/08/iOS10%E6%96%B0%E7%89%B9%E6%80%A7-UserNotifications/&quot;&gt;上篇文章&lt;/a&gt;主要介绍了新的通知框架的基本使用，这篇文章主要说一下&lt;strong&gt;多媒体通知&lt;/strong&gt;和&lt;strong&gt;扩展&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS10" scheme="http://hanwp.github.io/categories/iOS10/"/>
    
    
      <category term="iOS" scheme="http://hanwp.github.io/tags/iOS/"/>
    
      <category term="iOS10新特性" scheme="http://hanwp.github.io/tags/iOS10%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>iOS10新特性-UserNotifications</title>
    <link href="http://hanwp.github.io/2016/10/08/iOS10%E6%96%B0%E7%89%B9%E6%80%A7-UserNotifications/"/>
    <id>http://hanwp.github.io/2016/10/08/iOS10新特性-UserNotifications/</id>
    <published>2016-10-08T03:30:12.000Z</published>
    <updated>2017-03-27T02:21:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>iOS10增加了新的通知框架<code>UserNotifications</code>，整合了本地通知和APNS，新的API使用起来特别舒服。这篇文章就大概介绍一下新的框架。</p>
</blockquote>
<h1 id="新特性："><a href="#新特性：" class="headerlink" title="新特性："></a>新特性：</h1><ul>
<li>通知可以附加图片、音频、视频</li>
<li>可以对通知更新、删除</li>
<li>统一本地通知和APNS</li>
</ul>
<a id="more"></a>
<h1 id="权限申请"><a href="#权限申请" class="headerlink" title="权限申请"></a>权限申请</h1><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@import UserNotifications;</span><br><span class="line"><span class="comment">// 请求使用通知</span></span><br><span class="line">[[UNUserNotificationCenter currentNotificationCenter] requestAuthorizationWithOptions:UNAuthorizationOptionBadge | UNAuthorizationOptionSound | UNAuthorizationOptionAlert completionHandler:^(<span class="built_in">BOOL</span> granted, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">       <span class="keyword">if</span> (granted) &#123;</span><br><span class="line">           <span class="comment">//用户同意使用通知</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;];</span><br></pre></td></tr></table></figure>
<p>第一次调用这个方法时，会弹出一个系统弹窗。<br><img src="http://upload-images.jianshu.io/upload_images/852660-bf32a6da0243c4c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UNNotification_author.png"><br>要注意的是，一旦用户拒绝了这个请求，再次调用该方法也不会再进行弹窗，想要应用有机会接收到通知的话，用户必须自行前往系统的设置中为你的应用打开通知。</p>
<p><strong>远程推送</strong></p>
<p>用户同意了通知申请之后，就可以进行本地通知了。如果要进行远程推送，还需要获取token。然后服务器根据这个token，向<code>Apple Push Notification Service</code>服务器提交请求，然后<code>APNS</code>通过token识别用户，推送给用户。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向APNS请求token</span></span><br><span class="line">    [[<span class="built_in">UIApplication</span> sharedApplication] registerForRemoteNotifications];</span><br><span class="line"><span class="comment">//请求token成功</span></span><br><span class="line">- (<span class="keyword">void</span>)application:(<span class="built_in">UIApplication</span> *)application didRegisterForRemoteNotificationsWithDeviceToken:(<span class="built_in">NSData</span> *)deviceToken &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>通知权限</strong><br>可以通知下面的这个方法，检查当前APP的通知权限。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[UNUserNotificationCenter currentNotificationCenter] getNotificationSettingsWithCompletionHandler:^(UNNotificationSettings * _Nonnull settings) &#123;</span><br><span class="line">    &#125;];</span><br></pre></td></tr></table></figure></p>
<h1 id="发送通知"><a href="#发送通知" class="headerlink" title="发送通知"></a>发送通知</h1><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建通知</span></span><br><span class="line">    UNMutableNotificationContent *content = [[UNMutableNotificationContent alloc] init];</span><br><span class="line">    content.title = <span class="string">@"这是一条通知的标题"</span>;</span><br><span class="line">    content.body = <span class="string">@"这是一条通知的内容"</span>;</span><br><span class="line">    content.categoryIdentifier = <span class="string">@"ceshi"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建发送触发</span></span><br><span class="line">    UNTimeIntervalNotificationTrigger *trigger = [UNTimeIntervalNotificationTrigger triggerWithTimeInterval:<span class="number">5</span> repeats:<span class="literal">NO</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 发送请求标识符</span></span><br><span class="line">    <span class="built_in">NSString</span> *identifier = <span class="string">@"com.hanwei.firstNotificationIndentifier"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建一个通知请求</span></span><br><span class="line">    UNNotificationRequest *request = [UNNotificationRequest requestWithIdentifier:identifier content:content trigger:trigger];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将请求添加到通知中心</span></span><br><span class="line">    [[UNUserNotificationCenter currentNotificationCenter] addNotificationRequest:request withCompletionHandler:^(<span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!error) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"通知添加成功"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br></pre></td></tr></table></figure>
<p>发送通知成功之后，就可以回到首页，或者锁屏查看了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/852660-7380841edf400908.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UNNotification_home.png"></p>
<h1 id="取消和更新通知"><a href="#取消和更新通知" class="headerlink" title="取消和更新通知"></a>取消和更新通知</h1><p>远程推送只能更新，不能取消已经展示过的通知。</p>
<h2 id="取消"><a href="#取消" class="headerlink" title="取消"></a>取消</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 移除展示过的通知</span></span><br><span class="line">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">6</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    [[UNUserNotificationCenter currentNotificationCenter] removeDeliveredNotificationsWithIdentifiers:@[identifier]];</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//移除还未展示的通知</span></span><br><span class="line">[[UNUserNotificationCenter currentNotificationCenter] removePendingNotificationRequestsWithIdentifiers:@[identifier]];</span><br></pre></td></tr></table></figure>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 不管通知是否已经展示过，都可以根据标示进行通知的更新</span></span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">8</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        NSLog(@"两秒钟后更新通知内容");</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建发送触发</span></span><br><span class="line">        UNTimeIntervalNotificationTrigger *trigger = [UNTimeIntervalNotificationTrigger triggerWithTimeInterval:<span class="number">2</span> repeats:<span class="literal">NO</span>];</span><br><span class="line">        </span><br><span class="line">        UNMutableNotificationContent *content = [[UNMutableNotificationContent alloc] init];</span><br><span class="line">        content.title = <span class="string">@"这是一条通知的标题"</span>;</span><br><span class="line">        content.body = <span class="string">@"这是新的内容😀"</span>;</span><br><span class="line">        content.categoryIdentifier = <span class="string">@"ceshi"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建一个通知请求</span></span><br><span class="line">        <span class="comment">// 同一个标示的话就会覆盖之前的通知</span></span><br><span class="line">        UNNotificationRequest *request = [UNNotificationRequest requestWithIdentifier:identifier content:content trigger:trigger];</span><br><span class="line">        </span><br><span class="line">        [[UNUserNotificationCenter currentNotificationCenter] addNotificationRequest:request withCompletionHandler:^(<span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!error) &#123;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"新的通知添加成功"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="通知处理"><a href="#通知处理" class="headerlink" title="通知处理"></a>通知处理</h1><p>通知处理就是，处理用户直接和通知的交互。比如微信发过来一条消息，你可以直接在通知上进行回复，而不用打开微信app。</p>
<h2 id="应用内展示通知"><a href="#应用内展示通知" class="headerlink" title="应用内展示通知"></a>应用内展示通知</h2><p>我们知道当APP在前台使用的过程中，在默认情况下，通知是没有任何提示的。但是要想有展示的效果，可以通过下面的代码设置。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The method will be called on the delegate only if the application is in the foreground. If the method is not implemented or the handler is not called in a timely manner then the notification will not be presented. The application can choose to have the notification presented as a sound, badge, alert and/or in the notification list. This decision should be based on whether the information in the notification is otherwise visible to the user.</span></span><br><span class="line">- (<span class="keyword">void</span>)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(<span class="keyword">void</span> (^)(UNNotificationPresentationOptions options))completionHandler</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 用户在前台使用APP的时候，收到通知，会调用此方法.</span></span><br><span class="line">    <span class="comment">// 写这个回调代表，会在APP打开的情况下，弹出通知。</span></span><br><span class="line">    <span class="comment">// 如果不复写次方法，或者`completionHandler();`，APP在前台收到通知将不会弹出提示。</span></span><br><span class="line">    completionHandler(UNNotificationPresentationOptionBadge | UNNotificationPresentationOptionSound | UNNotificationPresentationOptionAlert);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这是通知中的代理方法，需要先设置代理、签协议。<code>&lt;UNUserNotificationCenterDelegate&gt;</code></p>
<blockquote>
<p>To guarantee that your app is able to respond to actionable notifications, you must set the value of this property before your app finishes launching. For example, this means assigning a delegate object to this property in an iOS app’s <code>application:willFinishLaunchingWithOptions:</code>or <code>application:didFinishLaunchingWithOptions:</code> method.</p>
</blockquote>
<p>需要注意的是，这个代理必须要在程序启动之前设置好。一般在 <code>application:didFinishLaunchingWithOptions:</code>这个方法设置就可以。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置代理</span></span><br><span class="line">[[UNUserNotificationCenter currentNotificationCenter] setDelegate:<span class="keyword">self</span>];</span><br></pre></td></tr></table></figure>
<h2 id="处理用户和通知的交互"><a href="#处理用户和通知的交互" class="headerlink" title="处理用户和通知的交互"></a>处理用户和通知的交互</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">设置通知上面的交互按钮</span><br><span class="line">     UNNotificationActionOptionAuthenticationRequired //操作这个按钮会先检查iPhone是否解锁</span><br><span class="line">     UNNotificationActionOptionDestructive //按钮会被高亮标记（红色）</span><br><span class="line">     UNNotificationActionOptionForeground // 点击按钮会将APP唤起</span><br><span class="line">     */</span></span><br><span class="line">    UNNotificationAction *unlocking = [UNNotificationAction actionWithIdentifier:<span class="string">@"unlocking"</span></span><br><span class="line">                                                                           title:<span class="string">@"unlocking"</span></span><br><span class="line">                                                                         options:UNNotificationActionOptionAuthenticationRequired];</span><br><span class="line">    UNNotificationAction *destructive = [UNNotificationAction actionWithIdentifier:<span class="string">@"destructive"</span></span><br><span class="line">                                                                             title:<span class="string">@"destructive"</span></span><br><span class="line">                                                                           options:UNNotificationActionOptionDestructive];</span><br><span class="line">    UNNotificationAction *foreground = [UNNotificationAction actionWithIdentifier:<span class="string">@"foreground"</span></span><br><span class="line">                                                                            title:<span class="string">@"foreground"</span></span><br><span class="line">                                                                          options:UNNotificationActionOptionForeground];</span><br><span class="line">    UNTextInputNotificationAction *input = [UNTextInputNotificationAction actionWithIdentifier:<span class="string">@"text"</span> title:<span class="string">@"text"</span> options:UNNotificationActionOptionAuthenticationRequired textInputButtonTitle:<span class="string">@"text_btn"</span> textInputPlaceholder:<span class="string">@"placeholder"</span>];</span><br><span class="line">    <span class="comment">// 注意：这里的category的标示如果和发送通知时，写的category标示不一样的时候，发过来的通知不会显示action！！！发送通知的时候可以不写标示。</span></span><br><span class="line">    <span class="comment">// 我这里是，两边都写得 “ceshi”</span></span><br><span class="line">    UNNotificationCategory *category = [UNNotificationCategory categoryWithIdentifier:<span class="string">@"ceshi"</span></span><br><span class="line">                                                                              actions:@[unlocking, destructive, foreground, input] intentIdentifiers:@[<span class="string">@""</span>]</span><br><span class="line">                                                                              options:UNNotificationCategoryOptionNone];</span><br><span class="line">    </span><br><span class="line">    [[UNUserNotificationCenter currentNotificationCenter] setNotificationCategories:[<span class="built_in">NSSet</span> setWithObject:category]];</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/852660-2fc26e066714dfc9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UNNotification_text_01.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/852660-f511e53dc946f1e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UNNotification_text_02.png"></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The method will be called on the delegate when the user responded to the notification by opening the application, dismissing the notification or choosing a UNNotificationAction. The delegate must be set before the application returns from applicationDidFinishLaunching:.</span></span><br><span class="line">- (<span class="keyword">void</span>)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(<span class="keyword">void</span>(^)())completionHandler</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//当用户是通过和通知的交互进入app的时候，拿到通知对象。</span></span><br><span class="line">    UNNotificationContent *content = response.notification.request.content;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([content.categoryIdentifier isEqualToString:<span class="string">@"ceshi"</span>]) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ([response.actionIdentifier isEqualToString:<span class="string">@"text"</span>]) &#123;</span><br><span class="line">            UNTextInputNotificationResponse *textResp = (UNTextInputNotificationResponse *)response;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"输入文字的内容是%@"</span>, textResp.userText);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ([response.actionIdentifier isEqualToString:<span class="string">@"unlocking"</span>]) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"unlocking"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ([response.actionIdentifier isEqualToString:<span class="string">@"destructive"</span>]) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"destructive"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ([response.actionIdentifier isEqualToString:<span class="string">@"foreground"</span>]) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"foreground"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    completionHandler();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://github.com/Hanwp/UNNotification.git" target="_blank" rel="external">Demo</a>看这里</p>
<p>关于通知发送富文本部分，正在整理，等整理好了，我会继续补充！</p>
</blockquote>
<h1 id="2016-10-09补充："><a href="#2016-10-09补充：" class="headerlink" title="2016-10-09补充："></a>2016-10-09补充：</h1><p>多媒体通知已经更新：<a href="http://hanwp.github.io/2016/10/09/iOS10%E6%96%B0%E7%89%B9%E6%80%A7-UserNotifications%EF%BC%88%E4%BA%8C%EF%BC%89/">iOS10新特性-UserNotifications(二)</a></p>
<blockquote>
<p>参考：<br><a href="https://onevcat.com/2016/08/notification/" target="_blank" rel="external">https://onevcat.com/2016/08/notification/</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;iOS10增加了新的通知框架&lt;code&gt;UserNotifications&lt;/code&gt;，整合了本地通知和APNS，新的API使用起来特别舒服。这篇文章就大概介绍一下新的框架。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;新特性：&quot;&gt;&lt;a href=&quot;#新特性：&quot; class=&quot;headerlink&quot; title=&quot;新特性：&quot;&gt;&lt;/a&gt;新特性：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;通知可以附加图片、音频、视频&lt;/li&gt;
&lt;li&gt;可以对通知更新、删除&lt;/li&gt;
&lt;li&gt;统一本地通知和APNS&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="iOS10" scheme="http://hanwp.github.io/categories/iOS10/"/>
    
    
      <category term="iOS" scheme="http://hanwp.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS10权限crash问题</title>
    <link href="http://hanwp.github.io/2016/09/29/iOS10%E6%9D%83%E9%99%90crash%E9%97%AE%E9%A2%98/"/>
    <id>http://hanwp.github.io/2016/09/29/iOS10权限crash问题/</id>
    <published>2016-09-29T03:10:16.000Z</published>
    <updated>2016-11-14T06:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直以来苹果都特别注重用户的隐私问题，比如访问联系人和打开相册都会弹出一个提示，来征求用户的意见，iOS10更加完善了这方面的权限。</p>
<blockquote>
<p><strong>A significant change in iOS 10 is that you must declare ahead of time any access to private data or your App will crash.</strong> </p>
</blockquote>
<p>在访问下列信息的时候，需要在<code>info.plist</code>文件里，加上访问说明。</p>
<blockquote>
<p>Contacts, Calendar, Reminders, Photos, Bluetooth Sharing, Microphone, Camera, Location, Health, HomeKit, Media Library, Motion, CallKit, Speech Recognition, SiriKit, TV Provider.</p>
</blockquote>
<a id="more"></a>
<p>否则就会造成崩溃，这是我没有加说明的情况下，试图访问图库的一个崩溃</p>
<blockquote>
<p>This app has crashed because it attempted to access privacy-sensitive data without a usage description.  The app’s Info.plist must contain an NSPhotoLibraryUsageDescription key with a string value explaining to the user how the app uses this data.</p>
</blockquote>
<p>可以直接在<code>info.plist</code>里添加键值对，输入<code>Privacy</code>就会有提示了。<br><img src="http://upload-images.jianshu.io/upload_images/852660-3b093db8667a7f85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Privacy_info.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/852660-3235757766d715b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Privacy_alert.png"></p>
<p>也可以以<code>Source Code</code>的方式打开<code>info.plist</code>，然后粘贴下面的字段。<br>下面列出所有的字段，方便以后粘贴使用。<br><img src="http://upload-images.jianshu.io/upload_images/852660-dd3b8a7e20435d7f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="info_source_code.png"><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;key&gt;NSVideoSubscriberAccountUsageDescription&lt;/key&gt;</span><br><span class="line">	&lt;string&gt;视频认证&lt;/string&gt;</span><br><span class="line">	&lt;key&gt;NSSpeechRecognitionUsageDescription&lt;/key&gt;</span><br><span class="line">	&lt;string&gt;语音识别&lt;/string&gt;</span><br><span class="line">	&lt;key&gt;NSSiriUsageDescription&lt;/key&gt;</span><br><span class="line">	&lt;string&gt;Siri使用&lt;/string&gt;</span><br><span class="line">	&lt;key&gt;NSRemindersUsageDescription&lt;/key&gt;</span><br><span class="line">	&lt;string&gt;访问提醒事项&lt;/string&gt;</span><br><span class="line">	&lt;key&gt;kTCCServiceMediaLibrary&lt;/key&gt;</span><br><span class="line">	&lt;string&gt;TV控制&lt;/string&gt;</span><br><span class="line">	&lt;key&gt;NSMotionUsageDescription&lt;/key&gt;</span><br><span class="line">	&lt;string&gt;运动权限&lt;/string&gt;</span><br><span class="line">	&lt;key&gt;NSMicrophoneUsageDescription&lt;/key&gt;</span><br><span class="line">	&lt;string&gt;麦克风权限&lt;/string&gt;</span><br><span class="line">	&lt;key&gt;NSAppleMusicUsageDescription&lt;/key&gt;</span><br><span class="line">	&lt;string&gt;苹果音乐&lt;/string&gt;</span><br><span class="line">	&lt;key&gt;NSLocationUsageDescription&lt;/key&gt;</span><br><span class="line">	&lt;string&gt;位置权限&lt;/string&gt;</span><br><span class="line">	&lt;key&gt;NSHomeKitUsageDescription&lt;/key&gt;</span><br><span class="line">	&lt;string&gt;HomeKit权限&lt;/string&gt;</span><br><span class="line">	&lt;key&gt;NSHealthUpdateUsageDescription&lt;/key&gt;</span><br><span class="line">	&lt;string&gt;健康应用&lt;/string&gt;</span><br><span class="line">	&lt;key&gt;NSHealthShareUsageDescription&lt;/key&gt;</span><br><span class="line">	&lt;string&gt;健康应用&lt;/string&gt;</span><br><span class="line">	&lt;key&gt;NSContactsUsageDescription&lt;/key&gt;</span><br><span class="line">	&lt;string&gt;通讯录&lt;/string&gt;</span><br><span class="line">	&lt;key&gt;NSCalendarsUsageDescription&lt;/key&gt;</span><br><span class="line">	&lt;string&gt;日历&lt;/string&gt;</span><br><span class="line">	&lt;key&gt;NSBluetoothPeripheralUsageDescription&lt;/key&gt;</span><br><span class="line">	&lt;string&gt;蓝牙&lt;/string&gt;</span><br><span class="line">	&lt;key&gt;NSPhotoLibraryUsageDescription&lt;/key&gt;</span><br><span class="line">	&lt;string&gt;相册&lt;/string&gt;</span><br><span class="line">	&lt;key&gt;NSCameraUsageDescription&lt;/key&gt;</span><br><span class="line">	&lt;string&gt;相机&lt;/string&gt;</span><br><span class="line">    &lt;key&gt;NSLocationAlwaysUsageDescription&lt;/key&gt;</span><br><span class="line">    &lt;string&gt;永久使用定位&lt;/string&gt;</span><br><span class="line">    &lt;key&gt;NSLocationWhenInUseUsageDescription&lt;/key&gt;</span><br><span class="line">    &lt;string&gt;应用使用的时候使用定位&lt;/string&gt;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>参考：<br><a href="http://useyourloaf.com/blog/privacy-settings-in-ios-10/" target="_blank" rel="external">http://useyourloaf.com/blog/privacy-settings-in-ios-10/</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直以来苹果都特别注重用户的隐私问题，比如访问联系人和打开相册都会弹出一个提示，来征求用户的意见，iOS10更加完善了这方面的权限。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A significant change in iOS 10 is that you must declare ahead of time any access to private data or your App will crash.&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在访问下列信息的时候，需要在&lt;code&gt;info.plist&lt;/code&gt;文件里，加上访问说明。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Contacts, Calendar, Reminders, Photos, Bluetooth Sharing, Microphone, Camera, Location, Health, HomeKit, Media Library, Motion, CallKit, Speech Recognition, SiriKit, TV Provider.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS10" scheme="http://hanwp.github.io/categories/iOS10/"/>
    
    
      <category term="iOS" scheme="http://hanwp.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>CocoaPods报错问题</title>
    <link href="http://hanwp.github.io/2016/04/12/CocoaPods%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/"/>
    <id>http://hanwp.github.io/2016/04/12/CocoaPods报错问题/</id>
    <published>2016-04-12T02:14:39.000Z</published>
    <updated>2016-11-14T06:29:20.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>使用CocoaPods管理第三方框架非常方便，但是有时候也会出现一些问题。</p>
</blockquote>
<h1 id="问题来源"><a href="#问题来源" class="headerlink" title="问题来源"></a>问题来源</h1><p>今天下载了<a href="https://github.com/Coding/Coding-iOS.git" target="_blank" rel="external">Coding</a>源码，打算研究一下。按照提示执行了脚本之后发现，还是会报这么一个错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">diff: /../Podfile.lock: No such file or directory</span><br><span class="line">diff: /Manifest.lock: No such file or directory</span><br><span class="line">error: The sandbox is not in sync with the Podfile.lock. Run &apos;pod install&apos; or update your CocoaPods installation.</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>于是我就重新<code>pod install</code>发现还是不行，接着就是各种<code>Google</code>，然后找到了<a href="http://stackoverflow.com/questions/17072396/cocoapods-errors-on-project-build" target="_blank" rel="external">这种方法</a>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//先把项目的Myproject.workspeace删除</span><br><span class="line">rm -rf MyProject.xcworkspace</span><br><span class="line">//再重新pod </span><br><span class="line">pod install</span><br></pre></td></tr></table></figure></p>
<p>按照步骤执行了之后，发现还是不行。（但是好像是有的人这么解决就可以。）</p>
<p>然后我发现在<code>pod install</code>的时候，终端会有这么两个提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[!] CocoaPods did not set the base configuration of your project because your project already has a custom config set. In order for CocoaPods integration to work at all, please either set the base configurations of the target `Coding_iOS` to `Pods/Target Support Files/Pods-Coding_iOS/Pods-Coding_iOS.debug.xcconfig` or include the `Pods/Target Support Files/Pods-Coding_iOS/Pods-Coding_iOS.debug.xcconfig` in your build configuration.</span><br><span class="line"></span><br><span class="line">[!] CocoaPods did not set the base configuration of your project because your project already has a custom config set. In order for CocoaPods integration to work at all, please either set the base configurations of the target `Coding_iOS` to `Pods/Target Support Files/Pods-Coding_iOS/Pods-Coding_iOS.release.xcconfig` or include the `Pods/Target Support Files/Pods-Coding_iOS/Pods-Coding_iOS.release.xcconfig` in your build configuration.</span><br></pre></td></tr></table></figure></p>
<p>然后抓住这个线索我又找到了<a href="http://stackoverflow.com/questions/26287103/cocoapods-warning-cocoapods-did-not-set-the-base-configuration-of-your-project" target="_blank" rel="external">最终解决办法</a>：</p>
<p>先在项目里把下面的<code>Configuration</code>都改为<code>None</code>,然后在<code>pod install</code>。这样就解决了。<br><img src="http://upload-images.jianshu.io/upload_images/852660-077dd1adbadf3b16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pic1"></p>
<p><strong>2016-6-14补充</strong><br>在我新项目里，我设置了多个target，用cocoaPods又出现了下面的错误。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[!] The `PuHuaHospital [Release]` target overrides the `GCC_PREPROCESSOR_DEFINITIONS` build setting defined in `Pods/Target Support Files/Pods-PuHuaHospital/Pods-PuHuaHospital.release.xcconfig&apos;. This can lead to problems with the CocoaPods installation</span><br><span class="line">    - Use the `$(inherited)` flag, or</span><br><span class="line">    - Remove the build settings from the target.</span><br><span class="line"></span><br><span class="line">[!] The `PuHuaHospitalDoctor [Release]` target overrides the `GCC_PREPROCESSOR_DEFINITIONS` build setting defined in `Pods/Target Support Files/Pods-PuHuaHospitalDoctor/Pods-PuHuaHospitalDoctor.release.xcconfig&apos;. This can lead to problems with the CocoaPods installation</span><br><span class="line">    - Use the `$(inherited)` flag, or</span><br><span class="line">    - Remove the build settings from the target.</span><br></pre></td></tr></table></figure>
<p><a href="http://stackoverflow.com/questions/18376416/the-target-overrides-the-other-ldflags-build-setting-defined-in-pods-pods" target="_blank" rel="external">解决办法</a>：<br>在<code>Build Settings</code><br>Header Search Paths<br>Other Linker Flags<br>Preprocessor Macros<br>在这三个地方都加上<code>$(inherited)</code>，然后重新<code>pod install</code>就可以了。</p>
<blockquote>
<p>如果有不明白的，请给我留言，谢谢。多谢支持~</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用CocoaPods管理第三方框架非常方便，但是有时候也会出现一些问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;问题来源&quot;&gt;&lt;a href=&quot;#问题来源&quot; class=&quot;headerlink&quot; title=&quot;问题来源&quot;&gt;&lt;/a&gt;问题来源&lt;/h1&gt;&lt;p&gt;今天下载了&lt;a href=&quot;https://github.com/Coding/Coding-iOS.git&quot;&gt;Coding&lt;/a&gt;源码，打算研究一下。按照提示执行了脚本之后发现，还是会报这么一个错误：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;diff: /../Podfile.lock: No such file or directory&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;diff: /Manifest.lock: No such file or directory&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;error: The sandbox is not in sync with the Podfile.lock. Run &amp;apos;pod install&amp;apos; or update your CocoaPods installation.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="解决方案" scheme="http://hanwp.github.io/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
    
      <category term="iOS" scheme="http://hanwp.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>instancetype</title>
    <link href="http://hanwp.github.io/2016/04/09/instancetype/"/>
    <id>http://hanwp.github.io/2016/04/09/instancetype/</id>
    <published>2016-04-09T09:12:47.000Z</published>
    <updated>2016-11-14T06:28:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文章翻译自官方文档</p>
</blockquote>
<p>使用<code>instancetype</code>关键字作为方法的返回值，能够返回一个类的实例。比如<code>alloc</code>,<code>init</code>等方法。<br>在一个合适的地方使用<code>instancetype</code>取代<code>id</code>将使你的代码更加安全。看下下面的代码：<br><a id="more"></a></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyObject</span> : <span class="title">NSObject</span></span></span><br><span class="line">+ (instancetype)factoryMethodA;</span><br><span class="line">+ (<span class="keyword">id</span>)factoryMethodB;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyObject</span></span></span><br><span class="line">+ (instancetype)factoryMethodA &#123; <span class="keyword">return</span> [[[<span class="keyword">self</span> class] alloc] init]; &#125;</span><br><span class="line">+ (<span class="keyword">id</span>)factoryMethodB &#123; <span class="keyword">return</span> [[[<span class="keyword">self</span> class] alloc] init]; &#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> doSomething() &#123;</span><br><span class="line">    <span class="built_in">NSUInteger</span> x, y;</span><br><span class="line"> </span><br><span class="line">    x = [[MyObject factoryMethodA] count]; <span class="comment">// Return type of +factoryMethodA is taken to be "MyObject *"</span></span><br><span class="line">    y = [[MyObject factoryMethodB] count]; <span class="comment">// Return type of +factoryMethodB is "id"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法<code>+factoryMethodA</code>的返回值是<code>instancetype</code>类型，即<code>MyObject *</code>类型。由于<code>MyObject</code>这个类没有<code>-count</code>这个方法，所以编译器会在<code>x</code>行给出这么一个警告：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">main.m: ’MyObject’ may not respond to ‘count’</span><br></pre></td></tr></table></figure></p>
<p>然而，由于方法<code>+factoryMethodB</code>的返回值是<code>id</code>类型，所以编译器在<code>y</code>行没有任何警告。</p>
<p>还有下面这个例子：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyObjectSubclass</span> : <span class="title">MyObject</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> doSomethingElse() &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *aString = [MyObjectSubclass factoryMethodA];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>编译器会报如下警告：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">main.m: Incompatible pointer types initializing ’NSString *’ with an expression of type ’MyObjectSubclass *’</span><br></pre></td></tr></table></figure></p>
<p>这两个例子就能大致说明<code>instancetype</code>和<code>id</code>的区别了。</p>
<h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>翻译本文的目的，最主要的目的是让我自己慢慢适应看官方文档，因为咱们学习iOS的所有权威的资料都来自apple开发者网站，所以看文档也是最直接和最有效的方式。</p>
<blockquote>
<p>最后，内容有翻译错误和不准确的地方请大家帮我指正，谢谢。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文章翻译自官方文档&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用&lt;code&gt;instancetype&lt;/code&gt;关键字作为方法的返回值，能够返回一个类的实例。比如&lt;code&gt;alloc&lt;/code&gt;,&lt;code&gt;init&lt;/code&gt;等方法。&lt;br&gt;在一个合适的地方使用&lt;code&gt;instancetype&lt;/code&gt;取代&lt;code&gt;id&lt;/code&gt;将使你的代码更加安全。看下下面的代码：&lt;br&gt;
    
    </summary>
    
      <category term="知识点" scheme="http://hanwp.github.io/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="iOS" scheme="http://hanwp.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>扇形图</title>
    <link href="http://hanwp.github.io/2016/04/01/%E6%89%87%E5%BD%A2%E5%9B%BE/"/>
    <id>http://hanwp.github.io/2016/04/01/扇形图/</id>
    <published>2016-04-01T03:07:15.000Z</published>
    <updated>2017-02-04T02:09:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>项目中一个界面包含了扇形图，是下面这个样子。于是这里先写了一个简单的实现（是固定死的比例，以后再加比例就OK了）。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/852660-f5277c97c9b7a993.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><a id="more"></a></p>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>利用<code>CAShapeLayer</code>和<code>UIBezierPath</code>绘制。</p>
<h1 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h1><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CAShapeLayer</span> *circle = [<span class="built_in">CAShapeLayer</span> layer];</span><br><span class="line">circle.lineWidth = lineWidth1;</span><br><span class="line">circle.path = [<span class="built_in">UIBezierPath</span> bezierPathWithArcCenter:<span class="built_in">CGPointMake</span>(kScreenWidth/<span class="number">2</span>, kScreenHeight/<span class="number">2</span>) radius:raidus1 startAngle:<span class="number">0</span> endAngle:<span class="number">-2</span>*M_PI clockwise:<span class="literal">NO</span>].CGPath;</span><br><span class="line">    circle.strokeColor = [<span class="built_in">UIColor</span> whiteColor].CGColor;</span><br><span class="line">    circle.fillColor = [<span class="built_in">UIColor</span> lightGrayColor].CGColor;</span><br><span class="line">    [<span class="keyword">self</span>.view.layer addSublayer:circle];</span><br></pre></td></tr></table></figure>
<p>有一点需要注意的是<code>lineWidth</code>这个属性设置了之后会有一半覆盖掉半径，也就是说半径是100的话，设置<code>lineWidth</code>为50的话，看到的效果是里面的半径是100-50/2=75.（我当时找了好久的原因才发现这个问题）</p>
<p><img src="http://upload-images.jianshu.io/upload_images/852660-50421d8b23f53e37.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>到这里就结束了，其实发现这个还是很简单的。这里有我完整的代码：<a href="https://github.com/Hanwp/CAShapeLayer.git" target="_blank" rel="external">点我查看</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;项目中一个界面包含了扇形图，是下面这个样子。于是这里先写了一个简单的实现（是固定死的比例，以后再加比例就OK了）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/852660-f5277c97c9b7a993.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="http://hanwp.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="iOS" scheme="http://hanwp.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式之单利（Singleton）</title>
    <link href="http://hanwp.github.io/2016/03/30/%E5%8D%95%E5%88%A9/"/>
    <id>http://hanwp.github.io/2016/03/30/单利/</id>
    <published>2016-03-30T07:02:14.000Z</published>
    <updated>2016-11-14T06:29:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>单利是一种设计模式，就是在应用程序生命周期中，只会创建一个对象实例。在保存用户的信息、数据管理者等需要使用到单利。系统也有一些单利的例子：<code>UIApplication</code>和<code>NSUserDefaults</code>等。</p>
<a id="more"></a>
<h1 id="创建方法"><a href="#创建方法" class="headerlink" title="创建方法"></a>创建方法</h1><ul>
<li>利用<code>GCD</code>创建</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Signleton *signleton = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">+ (instancetype)allocWithZone:(<span class="keyword">struct</span> _<span class="built_in">NSZone</span> *)zone</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line"><span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">signleton = [<span class="keyword">super</span> allocWithZone:zone];</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> signleton;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (Signleton *)shareSignleton</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line"><span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">signleton = [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> signleton;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">id</span>)copyWithZone:(<span class="keyword">struct</span> _<span class="built_in">NSZone</span> *)zone</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> signleton;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">id</span>)mutableCopyWithZone:(<span class="keyword">struct</span> _<span class="built_in">NSZone</span> *)zone</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> signleton;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>还有就是普通的创建</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Signleton *signleton = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">+ (Signleton *)shareSignleton</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//这里加锁是因为防止多线程同时调用</span></span><br><span class="line"><span class="keyword">@synchronized</span>(<span class="keyword">self</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!signleton) &#123;</span><br><span class="line">signleton = [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> signleton;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (instancetype)allocWithZone:(<span class="keyword">struct</span> _<span class="built_in">NSZone</span> *)zone</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">@synchronized</span>(<span class="keyword">self</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!signleton) &#123;</span><br><span class="line"><span class="comment">//调用父类分配内存空间</span></span><br><span class="line">signleton = [<span class="keyword">super</span> allocWithZone:zone];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> signleton;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">id</span>)copyWithZone:(<span class="keyword">struct</span> _<span class="built_in">NSZone</span> *)zone</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> signleton;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">id</span>)mutableCopyWithZone:(<span class="keyword">struct</span> _<span class="built_in">NSZone</span> *)zone</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> signleton;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MRC情况下，需要额外写以下方法</span></span><br><span class="line">- (<span class="keyword">oneway</span> <span class="keyword">void</span>)release</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSUInteger</span>)retainCount</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> INT32_MAX;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (instancetype)autorelease</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> signleton;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (instancetype)retain</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> signleton;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;单利是一种设计模式，就是在应用程序生命周期中，只会创建一个对象实例。在保存用户的信息、数据管理者等需要使用到单利。系统也有一些单利的例子：&lt;code&gt;UIApplication&lt;/code&gt;和&lt;code&gt;NSUserDefaults&lt;/code&gt;等。&lt;/p&gt;
    
    </summary>
    
      <category term="知识点" scheme="http://hanwp.github.io/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="iOS" scheme="http://hanwp.github.io/tags/iOS/"/>
    
  </entry>
  
</feed>
